---
layout: post
title: "Разворачивание мониторинга на базе TICK-стэка (ну, почти)"
date: '2012-12-18 18:13:00'
tags:
- influxdb
- ansible
- kapacitor
- telegraf
- collectd
- monitoring
---

**Дисклаймер**: статья - черновик и сброс мыслей за время ковыряния малоопытным человеком. Во многих аспектах я не разбирался, документацию не читал и вообще гнида и сволочь (считаю, что всё должно быть интуитивно и взлетать из коробки, даже если бесплатно и опенсорс).

# Действие первое. Автоматизация деплоя.

Вообще всё крутить планируется в OpenVZ'шках с CentOS 6, а разворачивать с помощью ansible. И здесь у influxdata начинается ебический геморрой с довольно большой цепочкой:

## Неудобно ставить пакеты

1. У них нет RPM-репозиториев, только скачивание RPM'ок. Тут есть свои минусы (нельзя автоматом скачать последнюю версию) и свои минусы (автоматом деплоиться будет только уже проверенная тобой версия).
2. В CentOS 6.8 "системная" версия python - 2.6. При использовании ansible, `anslble-lint` настойчиво ругается на curl, wget и говорит "качай с помощью модуля `get_url`". Модуль `get_url` вроде бы использует под капотом `python-requests`. А в python 2.6 всё устарело настолько, что мы получим `SNIMissingWarning`.

Выходов из этого, конечно много, но все похожи на стулья из тюремной загадки:

- поднять свой RPM-репозиторий (ееее, больше серверов богу серверов!) и добавлять его в yum.repos.d
- качать по http, благо доступно (поверив своему провайдеру, что тот не делает MitM для influxdata, который вроде как на многострадальном amazon крутит сервер с загрузками)
- забить хер на варнинги и качать wget'ом (который по хорошему кстати надо ещё поставить)
- вообще подсунуть yum-таску ссылку, пусть он с ней возится (и каждый запуск скачивает пакет и говорит)

Пока я экспериментирую, так что обойдусь вариантом с HTTP, потом может быть разверну репу, куда буду периодически подтягивать пакеты и можно будет упростить playbook'и до `yum name=influxdb state=latest`

Итого действия по установке influxdb/kapacitor/telegraf на одну машину (только для того чтобы убедиться что вся схема в целом рабочая):

```
ansible-playbook roles/influxdb/tasks/main.yml -l 192.168.3.15
ansible-playbook roles/kapacitor/tasks/main.yml -l 192.168.3.15
ansible-playbook roles/telegraf/tasks/main.yml -l 192.168.3.15
```

## Хотелки к ansible

Вот пока всё это делал, подумал, кстати, что ansible не хватает плагина для atom с autocomplete для всех модулей. Так, чтобы пишешь:

```
    - name: blabla
      copy:
```

и тут тебе сразу так вываливается:

```
  copy: src=../files/(и тут выбор файлов которые ща в нужном files есть) dst=/dst/
```

ну короче просто чтобы по человечески было. Ну да ладно, это не суть.

**TODO: выложить на гитхаб в виде репы (без slack url).**

## Промежуточный этап

Итак, у меня в принципе работает алертинг из документации. Telegraf служил просто примером, по факту он мне не нужен и я заменю его на collectd.

Однако уведомления в slack меня пока не радуют - не особо информативно.

> cpu:nil is CRITICAL
> cpu:nil is OK
