---
title: Тюнинг и мониторинг сетевого стэка Linux для ленивых.
---

## Введение

Основная задача при тюнинге сетевого стека (независимо от роли сервера - роутер, анализатор зеркала трафика, веб-сервер принимающий большие объёмы трафика) - максимально равномерно распределить нагрузку по обработке пакетов между ядрами процессора. Желательно с учётом принадлежности CPU и сетевой карты к одной NUMA-ноде, а также не создавая при этом лишних перекидываний пакета от процессора к процессору.

Для того чтобы заняться основной задачей, нужно выполнить первостепенную задачу - правильно подобрать аппаратную часть, само собой с учётом того, какие задачи вы собираетесь решать, откуда и сколько приходит/уходит трафика итд. Для примера несколько рекомендаций:

- от двухпроцессорной системы не будет значительной пользы, если вы используете только одну сетевую карту.
- от нескольких NUMA-нод не будет значительной пользы, если вы используете несколько портов одной сетевой карты.
- от многоядерного процессора не будет значительной пользы, если у вас сетевая карта, не поддерживающая несколько очередей.
    - но в таком случае можно использовать RPS
- от гипертрединга не будет значительной пользы вообще практически никогда
- частота ядер процессора важнее, чем число неиспользуемых ядер
- использование не DDR4 в 2017 году - плохая идея
- размер L3 и остальных кэшей имеет значение
- максимальный размер RX-буфера сетевой карты имеет значение, если в приоритете отсутствие потерь пакетов

Таким образом, если вы хотите принимать большие объёмы трафика с нескольких источников, вам стоит задуматься о сервере с числом процессоров и NUMA-нод, а также числу сетевых карт (не портов, а именно сетевых карт), равных числу этих источников. Нужно будет настроить привязку прерываний для очередей портов сетевых карт к ядрам процессора, принадлежащего к той же NUMA-ноде, что и сетевая карта.

## Господи, я не хочу во всём этом разбираться!

А особенно и не нужно. Я уже во всём разобрался и, чтобы не особо тратить время на то, чтобы объяснять коллегам, написал [набор утилит - netutils-linux](https://github.com/strizhechenko/netutils-linux).

- С помощью утилиты `network-top` можно наблюдать за успешностью применённых настроек.
- С помощью утилиты `rss-ladder` можно распределить прерывания сетевой карты на ядра выбранного процессора (по умолчанию нулевой).
- С помощью утилиты `rx-buffers-increase` можно автоматически увеличить буфер выбранной сетевой карты до оптимального значения.
- С помощью утилиты `maximize-cpu-freq` можно отключить плавающую частоту процессора (ценой повышенного энергопотребления, но кого оно волнует, когда производительность важна и это не ваш ноутбук, работающий на заряде аккумулятора?).
- С помощью утилиты `server-info rate` можно найти узкие места в аппаратном обеспечении сервера.

## Господи, я хочу во всём этом разбираться!

Прочитайте статьи про:

- [приём пакетов](https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/)
- [отправку пакетов](https://blog.packagecloud.io/eng/2017/02/06/monitoring-tuning-linux-networking-stack-sending-data/)

Они очень сильно меня вдохновили на написание всех этих тулз.

## Необычные кейсы

- Встречались сетевые карты, активно теряющие пакеты (missed) в случае использования RSS на несколько ядер в одной NUMA-ноде. Решение довольно странное - 6 RX-очередей были повешаны на 0 ядро, в rps_cpus каждой очереди была записана маска процессоров 111110, потери пропали.
- Встречались сетевые карты mellanox продолжающие работать при прекратившемся росте счётчиков прерываний. Трафик в tcpdump был, но владельцы сервера уверяли, что наблюдались плавающие, но не фиксируемые счётчиками потери. Нормальная работа восстановилась после включения и выключения RPS. Почему - неизвестно.
- Некоторые SFP-модули для Intel 82599ES при обновлении драйвера (сборка ixgbe из исходников с sourceforge) "пропадают" из списка сетевых карт и даже флаг unsupported_sfp=1 не помогает. При этом в lspci данный порт отображается, второй аналогичный порт работает, а в dmesg на оба порта одинаковая ругань.
- Некоторые драйверы сетевых карт позволяют подстраивать число очередей только под кратные двум значения (особенно обидно на 6-ядерных процессорах).
