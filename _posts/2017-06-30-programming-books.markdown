---
title: Прочитанные книги по программированию и не только
---

В бонус рецензия в 1 предложение.

## 2011-2016

- **Программист-прагматик** - обязательна для любого новичка просто чтобы адекватно работать
- **Психбольница в руках пациентов** - напоминает о том, что если вы программист - вы ментальный калека. Этого не исправить, но нужно учитывать при разработке ПО для людей.
- **An Introducion to programming on Go** - бесполезная книга, рассказывает о синтаксисе, который без постоянной практики забывается за неделю и вспоминается с гуглом за 5-10 минут.
- **Мифический человекомесяц** - нужно перечитывать раз в 3 года, о том что 9 дам не родят ребёнка за месяц и что купив две книжки вы не прочитаете их быстрее.
- **Верёвка достаточной длины чтобы выстрелить себе в ногу** - для C-богов советы как стрелять себе в ногу. Hint - тупо использование clang-check и warning==error вас спасёт эффективнее.
- **Язык программирования Си** - выучить синтаксис и понять основные концепты управления памятью на базовом уровне.
- **Азбука Ядра с примерами** - нудятина, но просто забить голову нужными терминами полезно, если решили серьёзно заниматься ядром. Куча примеров с PowerPC.
- **Факты и заблуждения профессиональого программирования** - хорошая книга для новичков, которые думают что в программировании всё довольно просто. Или что всё сложно.
- **Гибкие технологии экстремальное программирование и RUP** - читал когда только устроился работать тестером, понял мало. Видимо надо перечитать.
- **Человеческий фактор. Успешные проекты и команды** - книжка о том что люди важны и о том, что нужно хорошо кушать (вместе во славу тимбилдинга). Сдаётся мне если я это перечитаю сейчас - меня стошнит.
- **Scrum и XP заметки с передовой, 2007** - после прочтения от вас будет много нытья о том что "у нас скрам неправильный!". Ценности мб чуток подправит если вы технарь-аутист.
- **Экстремальное программирование, 2002** - читалось хорошо, как художественная литература, а о чём - не помню.
- **Advanced Bash Scripting Guide** - любому околосистемщику стоит по диагонали прочитать эту книжку просто чтобы понимать что написано в не low-skill-compatible скриптах.
- **Linux Advanced Routing and Traffic Control** - о том что iptables и iproute2 вообще умеют.
- **Unix in a nutshell** - неплохая книга о том как и почему именно так устроен Unix.
- **Искусство программирования для Unix** - хорошо почитать тем, кто в будущем планирует стать архитектором. Unix-стайл не единственный правильный стиль архитектуры ПО, но имеет много очень правильных и полезных концепций.
- **Introducing to Machine Learning with Python** - ниасилил (прочитал около 80 страниц ничего не пробуя) потому что не вставал sklearn на старый макбук ибо я чот намудрил там с кашей из brew/macports/python'ов.

## 2017

- **Главный вопрос программирования, рефакторинга и всего такого** - напоминает верёвку достаточной длины, подходит для C/C++ кодеров. Бесплатная, вроде от авторов PVS студио.
- **Чистый код** - нудятина, но меня подмывает написать свою книгу в том же духе, не думаю что она сильно отличалась бы от. Примеры вроде на java.
- **Dive into python** - так и не дочитал, но хорошо для вкатывания в питон для тех кто в нём ноль.
- **Packagecloud blog posts: Monitoring and tuning Linux networking stack: sending data / receiving data** - большая статья по устройству сетевого стека в Linux. Всем разработчикам и поддержке Carbon Reductor настоятельно рекомендуется к прочтению. Меня вдохновила и одновременно расстроила своим объёмом необходимых знаний настолько, что я начал проект [netutils-linux](https://github.com/strizhechenko/netutils-linux), который в идеале должен спасти людей от чтения этих статей.
- **Ядро Linux, Робер Лав** - это как Азбука Ядра, но не так нудно, мб потому что когда начал читать во второй раз уже бэкграунд был получше.
- **Cracking the Code Interview** - всем кто решил свалить в другую контору и матерится от того что проваливает интервью с алгоритмами на доске стоит пробежаться по задачкам из книги.
- **Site Reliability Engineering: How Google runs production software** - поверхностно прочитать - стоит, понимать что мы не гугл - стоит, реализовывать все идеи - мб не стоит, понимать почему именно у них именно так - тоже стоит. Вообще руководителям отделов техподдержки почитать про алертинг и постмортемы стоит. Создателям мониторингов тоже стоит почитать, там хороший разбор подводных камней.

## 2018

- **Пиши, сокращай** - 2018 год начался с того, что я решил развиваться не только в сторону программирования, но и в смежных дисциплинах - дизайне, документировании, стратегиях. Эта книга про то, как не разводить воду в тексте. Может испортить человека с интересным живым стилем, если он не умеет думать над тем, что читает.
- **Теория игр** - или как я полюбил просчитывать оптимальные стратегии вообще для всего и усилился в Excel. Хорошая книга, местами больше художественная, читается очень легко, много интересных примеров того, как взаимодействуют люди.
- **Distributed Systems, Таненбаум, 2015** - наконец-то осилил этот гигантский талмуд, который позволил мне систематизировать знания по распределённым системам. Отличная книга, даже если вы не занимаетесь непосредственно разработкой и поддержкой распределённых систем. Длинная, на английском, зато бесплатно и легально. Вдохновила меня начать писать свою книгу о менеджменте для программистов, т.к. увидел много схожих моментов в взаимодействии компонентов распределённых систем и людьми.
- **Изучаем SQL, O'Reilly** - небольшая книга, которая помогла мне заткнуть пробелы в знаниях по SQL (не знал как вообще JOIN'ы работают). Хоть и старая (~~там люди с пёсьими головами~~^W примеры для MySQL 4.0.3), но вполне внятно проходящаяся по стандарту ANSI SQL 92. Теперь хочу SQL-like фичи в Excel. Что дальше? Microsoft Access?
- **C++ today. Beast is back** - коротенький очерк того, что происходит с современным C++ и куда он движется (компилируемый перл блин).

## 2019

- **97 этюдов для архитекторов программных систем** - занудная книга с неконкретными советами.
- **Дизайн для недизайнеров** - моё чувство прекрасного затребовало огранки и хоть какой-то теории. В целом неплохая книга о шрифтах, контрасте, выравнивании, повторе и других вещах, которые я и так делал интуитивно.
- **Чистая архитектура** - очень легко читаемая книга про архитектуру от дядюшки Боба. Пока читал, передумал писать свою книгу про менеджмент и выстраивание бизнес-процессов для программистов, потому что понял, что вся моя идея объяснять взаимодействие людей с помощью терминологии архитектуры распределённых систем далеко не нова и нормальные люди называют её "распределение обязанностей". Конец книги забавный - Боб травит истории из начала своей карьеры, при этом стиль похож на ситуацию, когда приходишь в гости к деду и он начинает байки травить. Мне кажется если бы через книгу можно было наливать водочки, это был бы лучший экспириенс, ибо истории в самом деле интересные. Помимо историй он проводит аналогии с правилами чистого кода, рассказывает о том, к чему приводят те или иные решения, объясняет почему единственно-верного решения обычно нет, всё очень зависит от ситуации и как правило нужно балансировать.
- **Проект "феникс"** - купил и начал читать вместе с девушкой прочитав как в твиттере один товарищ её читал вслух. Девушка частенько вечерами ныла о том, что творится у неё на работе, какой ужасный бардак в процессах и всё такое. Вот первая половина книги была ЧЕРТОВСКИ похожа на это нытьё. А так, неплохая история о том, как ОЧЕНЬ БЫСТРО МИСТИЧЕСКИМ ОБРАЗОМ ПРОЦЕССЫ ИСПРАВЛЯЮТСЯ ЛЮДИ РАДЫ РАБОТАТЬ НИКТО НЕ МЕШАЕТ ДЕЛАТЬ РАБОТУ ЛУЧШЕ ПАЛКИ В КОЛЁСА НЕ СУЁТ ЗА ПОЛГОДА ВЕСЬ ОТДЕЛ НА НОГИ ВСТАЛ БРАТ ИЗ МОГИЛЫ ВЫЛЕЗ РАК ВЫЛЕЧИЛСЯ, А ГЕРОЯ НАЧАЛЬНИКОМ СДЕЛАЛИ. Книга заходит очень легко. Одна из наиболее подчёрнкутых мыслей - большая часть процессов в IT похожа на конвеер на заводе. Его можно и нужно оптимизировать, а оптимизировать надо умеючи.
- **Слово живое и слово мёртвое, Нора Галь** - Пиши-сокращай это модернизированный вариант Слова, заточенный под современных людей – рекламщиков и прочих. Слово написано для писателей, редакторов и переводчиков. В отличии от пиши-сокращай затрагивает не только и не столько языковые конструкции, но уместность слов и игр слов – мол, не гоже писать что мальчику которому повредили спину в немецком концлагере воспитательница говорит «руки вверх», когда хочет помочь переодеться. Надо переводить не механически, а прислушиваться к своей душе – не ляпнул ли я херню. Стандартная глава про канцелярит и заимствования из других языков. В конце – очень много примеров переводов Кашкинской школы, которую Нора сильно хвалит за то что у переводчиков есть слух. *Плюсы*: начинаешь любить русский язык. *Минусы*: начинаешь обращать внимание на то как убого пишут окружающие люди. В какой-то момент мне даже захотелось поработать редактором, а потом по работе нужно было проревьюить заказную маркетинговую статью. Ох как же у меня пекло, как пекло!
- **Вальсируя с медведями, Том Демарко** - Книга об управлении рисками. Кажется она даже не столько про проекты по разработке программного обеспечения, сколько про взрослость человека. Мне нравится то что у них есть список причин не прменять его и они такие… социальные. Обычно чертовы технари о таком не думают. Думаю, по жизни оно пригодится чуть больше чем "Теория игр".

## В процессе

- **Я так и знал. Голдратт**
- **Цель. Голдратт**

### Дожать отложенное

- **Python Algorithms and Data Structures**
- **Site Reliability Engineering: How Google runs production software** - поверхностно прочитать - стоит, понимать что мы не гугл - стоит, реализовывать все идеи - мб не стоит, понимать почему именно у них именно так - тоже стоит. Вообще руководителям отделов техподдержки почитать про алертинг и постмортемы стоит. Создателям мониторингов тоже стоит почитать, там хороший разбор подводных камней.
- **Ядро Linux, Робер Лав** - это как Азбука Ядра, но не так нудно, мб потому что когда начал читать во второй раз уже бэкграунд был получше.
- **Квантовая механика теоретический минимум**
