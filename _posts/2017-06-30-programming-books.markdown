---
title: Книги по программированию, прочитанные мной
---

## Книги

### Прочитанные

В бонус рецензия в 1 предложение.

- **Программист-прагматик** - обязательна для любого новичка просто чтобы адекватно работать
- **Психбольница в руках пациентов** - напоминает о том, что если вы программист - вы ебанутый. Этого не исправить, но нужно учитывать при разработке ПО для людей.
- **An Introducion to programming on Go** - бесполезная книга, рассказывает о синтаксисе, который без постоянной практики забывается за неделю и вспоминается с гуглом за 5-10 минут.
- **Мифический человекомесяц** - нужно перечитывать раз в 3 года, о том что 9 дам не родят ребёнка за месяц и что купив две книжки вы не прочитаете их быстрее.
- **Верёвка достаточной длины чтобы выстрелить себе в ногу** - для C-богов советы как стрелять себе в ногу. Hint - тупо использование clang-check и warning==error вас спасёт эффективнее.
- **Язык программирования Си** - выучить синтаксис и понять основные концепты управления памятью на базовом уровне.
- **Азбука Ядра с примерами** - нудятина, но просто забить голову нужными терминами полезно, если решили серьёзно заниматься ядром. Куча примеров с PowerPC.
- **Факты и заблуждения профессиональого программирования** - хорошая книга для новичков, которые думают что в программировании всё довольно просто. Или что всё сложно.
- **Dive into python** - так и не дочитал, но хорошо для вкатывания в питон для тех кто в нём ноль.
- **Чистый код** - нудятина, но меня подмывает написать свою книгу в том же духе, не думаю что она сильно отличалась бы от. Примеры вроде на java.
- **Гибкие технологии экстремальное программирование и RUP** - читал когда только устроился работать тестером, понял мало. Видимо надо перечитать.
- **Главный вопрос программирования, рефакторинга и всего такого** - напоминает верёвку достаточной длины, подходит для C/C++ кодеров. Бесплатная вроде от авторов PVS студио.
- **Человеческий фактор. Успешные проекты и команды** - книжка о том что люди важны и о том, что нужно хорошо кушать.
- **Scrum и XP заметки с передовой 2007г** - после прочтения от вас будет много нытья о том что у нас скрам неправильный. Ценности мб чуток подправит если вы технарь-аутист.
- **Экстремальное программирование 2002г** - читалось хорошо, как художественная литература, а о чём - не помню.
- **Advanced Bash Scripting Guide** - любому околосистемщику стоит по диагонали прочитать эту книжку просто чтобы понимать что написано в не low-skills-compatible скриптах.
- **Linux Advanced Routing and Traffic Control** - тем кто работает с редуктором и XGE стоит посмотреть что iptables и iproute2 вообще умеют.
- **Unix in a nutshell** - неплохая книга о том как и почему именно так устроен Unix.
- **Искусство программирования для Unix** - хорошо почитать тем, кто в будущем планирует стать архитектором. Unix-стайл не единственный правильный стиль архитектуры ПО, но имеет много очень правильных и полезных концепций.
- **Packagecloud blog posts: Monitoring and tuning Linux networking stack: sending data / receiving data** - большая статья по устройству сетевого стека в Linux. Всем разработчикам и поддержке Carbon Reductor настоятельно рекомендуется к прочтению. Меня вдохновила и одновременно расстроила своим объёмом необходимых знаний настолько, что я начал проект netutils-linux, который в идеале должен спасти людей от чтения этих статей.
- **Ядро Linux, Робер Лав** - это как Азбука Ядра, но не так нудно, мб потому что когда начал читать во второй раз уже бэкграунд был получше.
- **Introducing to Machine Learning with Python** - ниасилил потому что не вставал sklearn на старый макбук ибо я чот намудрил там с кашей из brew/macports/python'ов.
- **Cracking the Code Interview** - всем кто решил свалить в другую контору и матерится от того что проваливает интервью с алгоритмами на доске стоит пробежаться по задачкам из книги.
- **Site Reliability Engineering: How Google runs production software** - поверхностно прочитать - стоит, понимать что мы не гугл - стоит, реализовывать все идеи - мб не стоит, понимать почему именно у них именно так - тоже стоит. Вообще руководителям отделов техподдержки почитать про алертинг и постмортемы стоит. Создателям мониторингов тоже стоит почитать, там хороший разбор подводных камней.

### Читаемые

- Distributed Systems
