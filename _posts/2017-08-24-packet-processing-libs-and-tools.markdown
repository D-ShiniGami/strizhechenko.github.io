---
title: Сравнение python-либ и других утилит для анализа пакетов в PCAP-файлах
---

Передо мной недавно стояла задача разбивать PCAP файлы по TCP-стримам, я перепробовал несколько решений для этого. Возможно это сравнение мне когда-нибудь, да пригодится.

## Debuggability

- **scapy** - 4/5 - Даёт пользователю интерпретатор на основе ipython с дотабываним.
- **tshark + lua** - 2/5 - Больно, документация среднего качества, если LUA не знаком - тяжело. Единственный найденный способ дебага - принты.
- **dpkt** - 3/5 ipython / ipdb / дебаггер в pycharm в руки и вперёд
- **pyshark** - 4/5 ipython / ipdb / дебаггер в pycharm в руки и вперёд. Очень крутой pretty print
- **tcpflow** - ???
- **pcap-flow** - ???

## Умение в TLS

- **scapy** - 2/5 - Не умеет, есть проект scapy tls layers, но у него много проблем на MacOS / CentOS
- **tshark + lua** - 5/5 - Замечательно справляется, понимает семантику extension'ов.
- **dpkt** - 4/5 - Понять, что перед нами ClientHello способен, но про содержимое Extension'ов ничего не знает
- **pyshark** - 5/5 - Прозрачно наследует все возможности tshark
- **tcpflow, pcap-flow** - 1/5 - не умеют, но им это и не нужно

## Архитектурная простота

- **scapy** - 3/5 - Здоровая штука живущая сама по себе.
- **tshark + lua** - 5/5 - встроенный скриптовый язык + куча возможностей tshark - это очень круто
- **dpkt** - 4/5 - я пытался прилепить семантику Extension'ов TLS, удалось, но тащить это в mainline показалось стрёмно (т.к. спёр^Wадаптировал код с github)
- **pyshark** - 5/5 - вывод tshark -V парсится в объекты очень изящно
- **tcpflow** - не знаю
- **pcap-flow** - 4/5 - пара файлов на C.

## Сложность установки

- **scapy** - 3/5 - ставится через pip легко, часто падал с ошибками в MacOS/CentOS 6. Юзал py2.7. У людей из интернета всё отлично, мб я такой.
- **tshark + lua** - 4/5 - На большинстве современных машин поддержка lua включена по умолчанию. Для CentOS 6 необходимо пересобирать RPM'ку (--with-lua) и при использовании только rpmbuild получаем большое число ошибок сборки. autoreconf + ./configure + make отлично помогают.
- **dpkt, pyshark** - 5/5 - pip install dpkt / pyshark, всё.
- **tcpflow** - 5/5 - brew install tcpflow
- **pcap-flow** - 4/5 - на древних системах типа CentOS 6 не собрать, MacOS не поддерживается, только Linux. Требует glibc 2.14 и gcc 4.6.

## Правильность понимания tcp-stream

- **scapy, dpkt** - 1/5 - отсутствует
- **tshark + lua, pyshark** - 5/5 - абсолютно правильное
- **tcpflow, pcap-flow** - вроде правильное, но протестировать не удалось

## Возможность писать пакеты в PCAP

- **scapy, dpkt, pyshark, tcpflow** - 1/5 - нет (точнее не нашёл)
- **tshark + lua, pcap-flow** - 5/5 - есть

## Генерация и отправка пакетов

- **scapy** - есть
- **tshark + lua** - нет
- **dpkt, pyshark, tcpflow, pcap-flow** - не знаю

## Что выбрал-то?

В итоге остановился на tshark + lua, решение [выложил на github](https://github.com/strizhechenko/tshark-tcp-stream-splitter).

Единственная проблема, которую я не решил до конца - утечка файловых дескрипторов. Можно по идее кэшировать их в памяти, но я и без этого не понимаю как обратиться к пакету и сохранить его или указатель на него в памяти в каком-нибудь, например списке.

8192 дескрипторов не хватает на 283мб PCAP от одного пользователя, где-то на 960000м пакете дескрипторы кончаются. Маловероятно, что у него было действительно 8к одновременных сессий.
