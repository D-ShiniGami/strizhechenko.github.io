---
title: Сравнение python-либ для анализа пакетов в PCAP-файлах
---

Передо мной недавно стояла задача разбивать PCAP файлы по TCP-стримам, я перепробовал несколько решений для этого. Возможно это сравнение мне когда-нибудь, да пригодится.

| | scapy | tshark + lua | dpkt | pyshark | pcap-flow | tcpflow |
| ---- | ---- | ---- | ---- | ---- | ---- | ---- |
| Debuggability | 4. Даёт пользователю интерпретатор на основе ipython с дотабываним | 2. Больно, документация среднего качества, если LUA не знаком - тяжело. Единственный найденный способ дебага - принты. | 3. ipython / ipdb / дебаггер в pycharm в руки и вперёд | 4. ipython / ipdb / дебаггер в pycharm в руки и вперёд. Очень крутой pretty print | ??? | ??? |
| Умение в TLS | Не умеет, есть проект scapy tls layers, но у него много проблем на MacOS / CentOS | Замечательно справляется, понимает семантику extension'ов | Понять, что перед нами ClientHello способен, но про содержимое Extension'ов ничего не знает | Прозрачно наследует все возможности tshark | Да ему и не надо| Да ему и не надо |
| Генерация и отправка пакетов | Есть | Нет | ??? | ??? | Нет | Нет |
| Архитектурная простота | 3. Здоровая штука живущая сама по себе | 5. Встроенный скриптовый язык + куча возможностей tshark - это очень круто | 4. Пытался прилепить семантику Extension'ов TLS, удалось, но тащить это в mainline показалось стрёмно (т.к. спёр код на github) | 5. Вывод tshark -V парсится в объекты очень изящно | ??? | ??? |
| Производительность | ??? | 4. LUA - скриптовый язык, поэтому не 5, но исполнение TAP'ов прямо в tshark - это огонь | ??? | ??? | ??? | ??? |
| Сложность установки | 2. часто падал с рандомными ошибками что на CentOS 6 что на MacOS. Возможно касается только меня, у людей в интернете всё выглядит очень даже рабочим | 4. (на большинстве современных машин поддержка lua включена по умолчанию). Для CentOS 6 необходимо пересобирать RPM'ку (--with-lua) и при использовании только rpmbuild получаем большое число ошибок сборки. autoreconf + ./configure + make отлично помогают. | 5. pip install dpkt, всё | 5. pip install pyshark, всё | 5. brew install tcpflow, для linux не пробовал | 1. для сборки требует актуальный gcc и glibc 2.14, т.е. CentOS 6 идёт лесом |
| Знает ли что такое tcp stream | Нет | Да | Нет | Да | ??? | Да |
| Умеет дампить пакеты в PCAP | Вроде да | Да | ??? | ??? | ??? | Вроде нет |

## Что выбрал-то?

В итоге остановился на tshark + lua, решение [выложил на github](https://github.com/strizhechenko/tshark-tcp-stream-splitter).

Единственная проблема, которую я не решил до конца - утечка файловых дескрипторов. Можно по идее кэшировать их в памяти, но я и без этого не понимаю как обратиться к пакету и сохранить его или указатель на него в памяти в каком-нибудь, например списке.

8192 дескрипторов не хватает на 283мб PCAP от одного пользователя, где-то на 960000м пакете дескрипторы кончаются. Маловероятно, что у него было действительно 8к одновременных сессий.
