---
title: Как быть охренительно производительным разработчиком и не бесить того, кто сидит рядом
---

Если вы когда-нибудь работали в паре с кем-либо (экстремальное программирование), вы наверняка знаете как раздражает медленный коллега. Может быть вы тоже раздражаете ваших коллег своей тормознутостью. Попробую собрать чек-лист, по которому вы можете проверить, насколько с вами приятно работать. А если что-то не так - вы будете знать как это исправить.

Предположим, что у вас относительно адекватный работодатель, а заработная плата не настолько низкая, чтобы пренебрегать тем, как вам вообще работается и делаете вы вообще что-то или нет.

# Кратко

У программиста есть три врага

- переключения контекста
- медленный человеческий мозг
- исключения (IRL)

# Железо

## Клавиатура

1. **Используйте свою самую привычную клавиатуру**. Попросите работодателя заказать вам такую же клавиатуру, как у вас дома. Чем меньше контекст-свитчинга, тем лучше.
2. **Освойте хотя бы полуслепую печать**. Если не умеете в правильную слепую печать - просто смотрите в экран и устраняйте ошибки по мере их появления, а не через 20 секунд, написав ещё 3-4 слова. Если ваш взгляд во время печати сфокусирован на клавиатуре - это гарантия кучи ошибок.
3. **Используйте CMD/CTRL-C/V по мере возможности, вместо повторного набора текста**. Вы медленно печатаете, какая бы у вас не была скорость ввода текста. Это аксиома. Вы человек, у вас есть пределы. Для меня триггером для задачи "посмотреть, а нельзя ли откуда-нибудь на экране это скопировать" является необходимость ввести больше ≈12 символов.

## Мышь

Немного лично моих наблюдений. Переключение с клавиатуры на мышку зло, но медленная навигация по тексту с помощью клавиатуры - зло ещё большее. Для меня решением стало использование макбуков с хорошим тачпадом, которым можно пользоваться. Мой директор, с которым я раньше часто работал в паре, наверное вылил немало слёз, глядя как я жмакаю в vim 30↓, 30↓, 60↓, page down, вместо того чтобы просто нормально проскроллить текст дальше. Способа комофортно программировать с обычной мышкой я так и не нашёл, удобных и привычных клавиатур со встроенным тачпадом и местом под ладошки я так и нашёл.

## Монитор и DE

1. Видеоповтор - это хорошо для совместного code review.
2. Смотреть логи на отдельном сервере вместо постоянного переключения между окнами - это хорошо.
3. Перемещать окна мышкой - не очень хорошо. Snapping windows по хоткею - хорошо. Хотя бы по половине экрана влево-вправо и на весь экран. Сделать это можно с помощью:
    1. MacOS - [shiftit!](https://github.com/fikovnik/ShiftIt)
    2. Windows - не знаю.
    3. Linux - `список DE для каждой из которых написано "вы сами знаете".`

## Вычислительные ресурсы

Если вы деплоите разрабатываемый софт на локалхосте, не важно, прямо в системе, в докере, в виртуалке - это будет влиять на отзывчивость вашего DE. Старайтесь этого избегать, лучше меньше ресурсов иметь на рабочей станции, но крутить виртуалки на +/- мощном сервере, выделенном специально под эти задачи. Если делить такие сервера между разработчиками, конечно, будут конфликты за ресурсы, которые лучше решить превентивно в виде квот, либо (если это имеет смысл и вы имеете бабло) каждому разрабочику выделить по серверу.

Вопрос о том, что дороже - потерянное оплаченное время разработчиков или расходы на железо - решать вашему работодателю (а не вам). К слову: Core i5, DDR4, небольшие SSD, 2Tb HDD и гигабитные свитчи – дешёвые.

## Операционная система

1. **Используйте ОС, принятую в качестве стандартной в компании**. Причин несколько.
    1. Вам в случае проблем смогут помочь коллеги.
    2. В случае, если кому-то будет нужно работать вместе с вами за вашим компьютером, ему будет легче сделать несколько действий в той же ОС, что и установлена у него (минус 1 context switching)
    3. Хоткей для переключения языков однако для меня остаётся неразрешимой проблемой. Купил macbook специально чтобы не пользоваться чужими компами, когда помогаю, а сидеть рядом со своим. Так себе решение.
    4. Если у вас проблема в той ОС, которую вы всё же сами выбрали, которую вы любите - будьте добры, решайте её самостоятельно в нерабочее время, либо отрабатывайте время на её устранение потом. В противном случае это можно считать воровством времени у работодателя. Скажу за себя - на работе принята за стандарт Ubuntu, но мне хочется комфортного для меня DE и я использую MacOS. Недавно я потратил почти полтора часа на то, чтобы у меня заработал graphviz. В Ubuntu это работает из коробки. Должен ли работодатель платить за мои прихоти? Я так не считаю.
2. **Стартайтесь её не ломать**. А если собрались делать что-то, что потенциально выведет её из строя и приведёт к простою - заготовьте актуальную резервную копию. Я настоятельно рекомендую использовать побайтовое копирование дисков для этой задачи. Из этого + того, что диски сейчас дешёвые, следует ещё один вывод:
    1. Никогда ничего нигде не удаляйте.
    2. Перед удалением копируйте на долгосрочное хранение.
    3. Через 3 года если не понадобилось - так и быть, удалите.

## Инструменты

### Используйте те же инструменты, что и приняты в компании

Вообще глобальное правило - "все ножницы должны быть одинаковыми".

### Используйте те же настройки инструментов, что и приняты в компании.

Не надо сраться на тему табы, пробелы, это вообще не ваша забота. Если вы портите людям код - проблема не в том, что кто-то использует стрёмные стандарты, проблема в том, что вы используете разные конфиги IDE. Пофиг как вам кажется, как надо *правильно*. Тут сейчас больше за codestyle будет, но у меня есть правило "использовать наиболее общий случай, если иное не переопределяется частным, за исключением самого последнего":

1. Делай как принято в языке.
2. Делай как принято в компании.
3. Делай как принято в команде.
4. Делай как принято в проекте.
5. Делай как принято Вами.

### Обзаведитесь набором джентельмена

Набор джентельмена избавляет вас от непродуктивной работы. Он нужен для каждого языка, который вы используете.

1. **Редактор**. Если вы будете долбить по стрелкам клавиатуры чтобы обернуть слово в кавычки, вручную заменять названия переменной в нескольких местах, искать глазами как называется нужный вам метод в доке или исходниках (а не в предложениях автокомплита), писать доку, а после коммита править потому что "ой, поехало всё, чёртов markdown" - вы будете бесить напарника. У меня к слову есть ещё пара нерешённых проблем, но я их игнорирую:
    - я не нашёл хорошей замены выполнению произвольных консольных команд для преобразования выделенного текста, как в vim (`:%!sort -u`)
    - я понимаю как работает замена по умным регуляркам только в vim (что-то в духе `:s/something/& - это &/g`)
2. **Средство запуска программы**. Ок, некоторые программы требуют сложного окружения (и в докер их не положить), но многие программы легко можно запустить прямо на своей рабочей станции. Если это одна из них, а вы ради этого переключаетесь из редактора в консоль (а потом снова запускаете редактор, а он говорит вам о том, что уже запущен и читает этот файл, вы закрываете его, а потом восстанавливаете старую сессию с помощью fg) - вы будете бесить напарника.
3. **Отладчик**. Когда в +/- крупной системе вы добавляете принты входящих данных в каждую функцию из трейсбэка ошибки, которую вы лечите, чтобы понять какие аргументы всё поломали и где что-то пошло не так - вы будете бесить напарника.
4. **Профилировщик**. В большинстве случаев, когда вы заметите, что код тормозит и задумаетесь "мм, а где же, найду-ка я это половинным делением с помощью принтов с датой" - вы будете бесить напарника.
5. **Средство запуска тестов**. Если вы пишите код в одном месте, а запускаете тесты в другом, при этом периодически "ой, чот не запускаются, ща поправлю" - вы будете бесить напарника.
6. **Средство работы с VCS** (git, например). Если вы пишите код в одном месте, потом начинаете в другом проходиться по совершённым изменениям, а потом в третьем писать коммит, почёсывая голову "а чо ж я собственно поменял" и "а точно ничего лишнего не зацепил" - вы будете бесить напарника.
7. **Средства для рефакторинга**. Если перемещаете методы между классами или извлекаете тело цикла в метод вручную, а потом "ой, тут пара мест сломалась, ща починю ручками" - вы будете бесить вашего напарника.
8. **Линтер**. Если вы будете замечать банальные ошибки только при вызванной вручную компиляции или в рантайме - вы будете бесить вашего напарника.
9. **Хоткеи**. Само собой максимум из всех этих действий должен делаться хоткеями, которые вы помните. Лучше, если они стандартные и их помнит и ваш напарник.

# Заключение

Надеюсь эти простые советы, частично дублирующие старую добрую книжку "Программист-прагматик, путь от подмастерья к мастеру" помогут вам не бесить ваших коллег. Или меня.
