---
title: Советы для программистов (с историями)
---

Собрал все свои статьи по этой теме за 8 лет в одну.

## Не пишите код сразу

Я часто использую virsh. Мне захотелось дотабывать его команды, а в стандартной поставке этого не было. Что делает человек, который ценит своё время? **Гуглит не написано ли оно уже**, и только после этого начинает писать код. А не наоборот, [как я](https://github.com/hordecore/configs/blob/master/virsh). Оказывается [всё давно написано за полтора года до меня](http://www.redhat.com/archives/libvir-list/2011-October/msg00141.html) неким Serge E. Hallyn.

## Как обновлять большие системы

Иногда причиной проблем после обновления становятся изменения в конфигурации, сделанные **до** обновления. Их последствия возникают и замечаются не сразу. Причём после обновления все глаза устремлены к изменениям, которые принесла новая версия. Это создаёт ошибочные гипотезы, проверка которых требует времени, при этом время, когда система некорректно работает. Поэтому перед обновлением обеспечьте хотя бы неделю стабильной работы системы.

## Именуйте осмысленно

В Metro Last Light в отладке нашли "пасхалку", которая больше говорит о культуре разработки.

![Неосмыслено](http://img1.joyreactor.cc/pics/comment/Metro-Last-Light-anna-ebat-russian-480425.jpeg)

1. Переменная названа транслитом по-русски.
2. В имени сделана ошибка.

Я слышал истории о плохих условиях, в которых делали эту игру. Возможно, такие переменные встречаются по всему коду игры. Неудивительно, что разработка двигалась туго.

Мне как-то сказали такую фразу: "программиста можно перестать считать джуниором тогда, когда он начинает осмысленно именовать даже временные файлы". Я с ней согласен на все 100.

## Действуйте осмысленно

В августе 2013 года, один мой хороший друг написал мне следующее:

> Мне на неттопе надо собрать ядро, чтобы оно скомпилировалось очень быстро и чтобы поддерживалось только используемое железо и функциональность: сетевые карты ethernet и wi-fi, SATA-контроллер, мониторинг температур, swap, процессор Atom и его встроенное видео, даже если без 3D-ускорителей. Будет коробочным веб-сервером, никаких внешних устройств подключать не планирую. Можно ли подогнать размер ядра под, например, ядра роутеров? Еще интересно, можно ли вкомпилить внутрь ядра например nginx и mysql сервер? Как вообще глянуть то, что выполняется до /etc/rc2.d/? Определение оборудования, подгрузка модулей. Я хочу чтоб при старте не было опроса железа на наличие, а тупо подгрузка модулей. Сервисы я уже повыпиливал, у меня даже kern.log не пишется, а еще sysctl подкрутил, чтобы сетевые функции поубирать, форвардинг итд. В inittab только один экземпляр консоли оставил. Можно ещё кастрировать консоль локальную, чтоб при размещении сервака никто не пытался подключить монитор и глянуть че там.

Это отличный пример преждевременной оптимизации: танцуем не от проблем, а от желания поковыряться. Это неплохо само по себе (самообразование), но осознавать нужно.

Все такие удаления приводят к потенциальному будущему неудобству, а прироста производительности практически не дают. Ядро не будет уметь делать некоторые вещи, но если оно этим итак не занимается - разница будет заметна только во времени загрузки ядра и initrd в память.

Делать ядро, заточенное под конкретную железку экономически невыгодно - через год она помрёт, а производитель их больше не выпускает.
