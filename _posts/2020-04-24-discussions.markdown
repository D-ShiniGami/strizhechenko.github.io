---
title: Совещания и обсуждения
---

Есть группа людей, обсуждающих набор вопросов. Предположим, они используют для этой цели чат. У них есть повестка и у всех есть право голоса.

- Вася высказывает своё мнение о первом вопросе.
- Лена высказывает мнение о втором.
- ... 20 сообщений ...
- Петя высказался про первый вопрос точно так же как и Вася 21 сообщение назад.

Из-за числа сообщений Петя даже не читал что писал Вася. Какова ценность высказывания Пети? 0, т.к. он дублируют мнение Васи. Какова ценность Васиного сообщения для Пети? 0, т.к. он его не видел. И это при том что мнения совпадают.

На мой взгляд эту проблему можно решить тредами, счётчиками одобрений мнений и одним правилом.

## Треды

- Обсуждение первого вопроса. Решение: мнение с наибольшим счётчиком одобрений, его плюсы и минусы
    - Мнение Васи. Плюсы, минусы. (3 одобрения).
    - 5 **других** мнений со счётчиками одобрений, плюсами и минусами.

## Правило

Для того, чтобы с мнениями можно было легко ознакомиться, нужно устранять дубликаты как мнений, так и плюсов и минусов.

Люди будут замотивированы устранять дубликаты мнений, так как для принятия их решения, они должны либо заинтересовать других своим решением, либо присоединиться к наибольшей группе, интересы которой совпадают. В случае если есть два схожих мнения, их (вместе со счётчиком одобрений) можно объединить по соглашению авторов этих мнений, устранив различия.

В такой схеме общения Петя, желая высказаться, скорее всего просто присоединился бы к мнению Васи.

А Олег, который присоединился к дискуссии спустя день, мог бы узнать о всех подводных камнях и деталях значительно быстрее, ведь если не разворачивать комментарии - сразу будет видна текущая резолюция по всем вопросам!

## Полумеры

1. При участии в обсуждениях удаляйте свои сообщения, не относящиеся к делу.
2. Актуализируйте высказанное мнение и группируйте полезные сообщения в одно, если это не нарушает цепочку диалога.

P.S: Кажется я придумал самомодерацию на форуме.

## Аналогии

То же самое делается с помощью `git merge --squashed` - кучу промежуточного бардака (актуального в моменте разработки) можно объединить в осмысленное описание изменений в наиболее актуальном контексте - как они вписываются в остальную систему.
